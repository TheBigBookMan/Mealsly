// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model User {
    id  String  @id @default(cuid())
    firebaseUid String  @unique
    email   String  @unique
    firstName String
    lastName String
    postcode String
    suburb String
    state String
    profileImage String?
    createdAt DateTime @default(now())
    paymentMethods PaymentMethod[]

    chef Chef?
    eater Eater?
}

model Eater {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String @unique

    latitude Float?
    longitude Float?
    
    orders Order[] @relation("EaterOrders")
    itemReviews ItemReview[] @relation("EaterItemReviews")
    reviews ChefReview[] @relation("EaterChefReviews")
    recurringOrders RecurringOrder[]
    conversations Conversation[]
}

model Chef {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String @unique
    isActive Boolean @default(true)

    bio String?
    
    latitude Float?
    longitude Float?

    Cuisines UserCuisine[]
    listings Listing[]

    conversations Conversation[]

    recurringOrders RecurringOrder[]

    chefReviews ChefReview[] @relation("ChefReviews")
    itemReviews ItemReview[] @relation("ChefItemReviews")
    orders Order[] @relation("ChefOrders")
    schedules Schedule[]
}

model PaymentMethod {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    stripeId String
    brand String
    last4 String
    expMonth Int
    expYear Int
    isDefault Boolean @default(false)
    createdAt DateTime @default(now())
}

model Message {
    id String @id @default(cuid())
    content String
    senderType SenderType
    senderId String
    recipientId String
    conversation Conversation @relation(fields: [conversationId], references: [id])
    conversationId String
    createdAt DateTime @default(now())
    read Boolean @default(false)
}

enum SenderType {
    CHEF
    EATER
}

model Conversation {
    id String @id @default(cuid())
    eater Eater @relation(fields: [eaterId], references: [id])
    eaterId String
    chef Chef @relation(fields: [chefId], references: [id])
    chefId String
    messages Message[]
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Cuisine {
    id String @id @default(cuid())
    name String @unique
    chefs UserCuisine[]
}

model UserCuisine {
    id String @id @default(cuid())

    chef Chef @relation(fields: [chefId], references: [id])
    chefId String

    cuisine Cuisine @relation(fields: [cuisineId], references: [id])
    cuisineId String

    @@unique([chefId, cuisineId])
}

model Listing {
    id String @id @default(cuid())
    title String
    description String
    price Float
    image String?
    available Boolean @default(true)
    createdAt DateTime @default(now())

    delivery Boolean @default(false)
    pickup Boolean @default(true)
    pickupAddressLatLon String?

    dietryTags ListingTag[]

    chef Chef @relation(fields: [chefId], references: [id])
    chefId String

    recurringOrders RecurringOrder[]
    orderItems OrderItem[]
    reviews ItemReview[]
}

model Tag {
    id String @id @default(cuid())
    name String @unique
    listings ListingTag[]
}

model ListingTag {
    id String @id @default(cuid())
    listing Listing @relation(fields: [listingId], references: [id])
    listingId String

    tag Tag @relation(fields: [tagId], references: [id])
    tagId String

    @@unique([listingId, tagId])
}

model Order {
    id String @id @default(cuid())
    status OrderStatus
    totalPrice Float
    pickupTime DateTime?
    createdAt DateTime @default(now())

    chef Chef @relation("ChefOrders", fields: [chefId], references: [id])
    chefId String

    eater Eater @relation("EaterOrders", fields: [eaterId], references: [id])
    eaterId String

    recurringOrders RecurringOrder[]
    orderItems OrderItem[]
    transaction Transaction?
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PREPARING
    READY
    COMPLETED
    CANCELLED
}

model OrderItem {
    id String @id @default(cuid())
    order Order @relation(fields: [orderId], references: [id])
    orderId String

    listing Listing @relation(fields: [listingId], references: [id])
    listingId String

    quantity Int
    price Float
}

model Transaction {
    id String @id @default(cuid())
    amount Float
    status TransactionStatus
    createdAt DateTime @default(now())
    releasedAt DateTime?
    paymentMethod String?
    paymentIntentId String?

    order Order @relation(fields: [orderId], references: [id])
    orderId String @unique
}

enum TransactionStatus {
    HELD
    RELEASED
    REFUNDED
    FAILED
}

model RecurringOrder {
    id String @id @default(cuid())
    quantity Int
    nextOrder DateTime
    frequency Frequency
    active Boolean @default(true)

    eater Eater @relation(fields: [eaterId], references: [id])
    eaterId String

    chef Chef @relation(fields: [chefId], references: [id])
    chefId String

    listing Listing @relation(fields: [listingId], references: [id])
    listingId String

    orders Order[]
}

enum Frequency {
    DAILY
    WEEKLY
    BIWEEKLY
    MONTHLY
}

model ChefReview {
    id String @id @default(cuid())
    rating Int
    comment String?
    createdAt DateTime @default(now())

    chef Chef @relation("ChefReviews", fields: [chefId], references: [id])
    chefId String

    eater Eater @relation("EaterChefReviews", fields: [eaterId], references: [id])
    eaterId String
}

model ItemReview {
    id String @id @default(cuid())
    rating Int
    comment String?
    createdAt DateTime @default(now())

    chef Chef @relation("ChefItemReviews", fields: [chefId], references: [id])
    chefId String

    eater Eater @relation("EaterItemReviews", fields: [eaterId], references: [id])
    eaterId String

    listing Listing @relation(fields: [listingId], references: [id])
    listingId String
}

model Schedule {
    id String @id @default(cuid())
    dayOfWeek Int
    startTime String
    endTime String
    pickup Boolean
    dropoff Boolean
    dropoffFee Float?

    chef Chef @relation(fields: [chefId], references: [id])
    chefId String
}

model Admin {
    id String @id @default(cuid())
    email String @unique
    firebaseUid String  @unique
    createdAt DateTime @default(now())
}