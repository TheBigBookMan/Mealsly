// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model User {
    id  String  @id @default(cuid())
    firebaseUid String  @unique
    stripeCustomerId String?
    email   String  @unique
    mobile String? @unique
    firstName String?
    lastName String?
    postcode String?
    suburb String?
    state String?
    profileImage String?
    createdAt DateTime @default(now())

    chef Chef?
    eater Eater?
}

model Eater {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String @unique

    latitude Float?
    longitude Float?
    
    // orders Order[] @relation("EaterOrders")
    // itemReviews ItemReview[] @relation("EaterItemReviews")
    // reviews ChefReview[] @relation("EaterChefReviews")
    // recurringOrders RecurringOrder[]
    // conversations Conversation[]

    // chefSubscriptions ChefSubscription[]

    // notifications Notification[]
}

model Chef {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String @unique
    isActive Boolean @default(true)

    bio String?
    
    latitude Float?
    longitude Float?

    Cuisines ChefCuisine[]
    listings Listing[]

    // conversations Conversation[]

    // recurringOrders RecurringOrder[]

    // chefReviews ChefReview[] @relation("ChefReviews")
    // itemReviews ItemReview[] @relation("ChefItemReviews")
    // orders Order[] @relation("ChefOrders")
    // plans Plan[]

    // packs Pack[]

    // eventChefs EventChef[]

    // chefSubscriptions ChefSubscription[]
}

model Cuisine {
    id String @id @default(cuid())
    name String @unique
    flagCode String
    popularity Int @default(0)
    chefs ChefCuisine[]

    // EventCuisine EventCuisine[]
}

model ChefCuisine {
    id String @id @default(cuid())

    chef Chef @relation(fields: [chefId], references: [id])
    chefId String

    cuisine Cuisine @relation(fields: [cuisineId], references: [id])
    cuisineId String

    @@unique([chefId, cuisineId])
}

model Listing {
    id String @id @default(cuid())
    title String
    description String
    price Float
    image String?
    available Boolean @default(true)
    createdAt DateTime @default(now())

    delivery Boolean @default(false)
    pickup Boolean @default(true)
    pickupAddressLatLon String?

    dietryTags ListingTag[]

    chef Chef @relation(fields: [chefId], references: [id])
    chefId String

    // recurringOrders RecurringOrder[]
    // orderItems OrderItem[]
    // reviews ItemReview[]

    // PackListing PackListing[]
}

model Tag {
    id String @id @default(cuid())
    name String @unique
    listings ListingTag[]
}

model ListingTag {
    id String @id @default(cuid())
    listing Listing @relation(fields: [listingId], references: [id])
    listingId String

    tag Tag @relation(fields: [tagId], references: [id])
    tagId String

    @@unique([listingId, tagId])
}

// enum NotificationType {
//     EVENT_PROMOTION
//     CHEF_PROMOTION
//     GENERAL
// }

// model Notification {
//     id String @id @default(cuid())
//     recipient Eater @relation(fields: [eaterId], references: [id])
//     eaterId String

//     title String
//     message String
//     type NotificationType
//     read Boolean @default(false)
//     createdAt DateTime @default(now())
// }

// model Event {
//     id String @id @default(cuid())
//     title String
//     description String?
//     startTime DateTime
//     endTime DateTime
//     latitude Float
//     longitude Float
//     address String?
//     city String?
//     country String?

//     eventChefs EventChef[]
//     eventCuisines EventCuisine[]
//     createdAt DateTime @default(now())
// }

// model EventChef {
//     id String @id @default(cuid())
//     event Event @relation(fields: [eventId], references: [id])
//     eventId String

//     chef Chef @relation(fields: [chefId], references: [id])
//     chefId String

//     @@unique([eventId, chefId])
// }

// model EventCuisine {
//     id String @id @default(cuid())
//     event Event @relation(fields: [eventId], references: [id])
//     eventId String

//     cuisine Cuisine @relation(fields: [cuisineId], references: [id])
//     cuisineId String

//     @@unique([eventId, cuisineId])
// }

// model ChefSubscription {
//     id String @id @default(cuid())
//     eater Eater @relation(fields: [eaterId], references: [id])
//     eaterId String

//     chef Chef @relation(fields: [chefId], references: [id])
//     chefId String

//     @@unique([eaterId, chefId])
// }

// model Message {
//     id String @id @default(cuid())
//     content String
//     senderType SenderType
//     senderId String
//     recipientId String
//     conversation Conversation @relation(fields: [conversationId], references: [id])
//     conversationId String
//     createdAt DateTime @default(now())
//     read Boolean @default(false)
// }

// enum SenderType {
//     CHEF
//     EATER
// }

// model Conversation {
//     id String @id @default(cuid())
//     eater Eater @relation(fields: [eaterId], references: [id])
//     eaterId String
//     chef Chef @relation(fields: [chefId], references: [id])
//     chefId String
//     messages Message[]
//     updatedAt DateTime @updatedAt
//     createdAt DateTime @default(now())
// }

// model Order {
//     id String @id @default(cuid())
//     status OrderStatus
//     totalPrice Float
//     pickupTime DateTime?
//     createdAt DateTime @default(now())

//     packId String?

//     chef Chef @relation("ChefOrders", fields: [chefId], references: [id])
//     chefId String

//     eater Eater @relation("EaterOrders", fields: [eaterId], references: [id])
//     eaterId String

//     recurringOrders RecurringOrder[]
//     orderItems OrderItem[]
//     transaction Transaction?
// }

// enum OrderStatus {
//     PENDING
//     CONFIRMED
//     PREPARING
//     READY
//     COMPLETED
//     CANCELLED
// }

// model OrderItem {
//     id String @id @default(cuid())
//     order Order @relation(fields: [orderId], references: [id])
//     orderId String

//     listing Listing @relation(fields: [listingId], references: [id])
//     listingId String

//     quantity Int
//     price Float
// }

// enum PackType {
//     DISCOUNT
//     FIXED
// }

// model Pack {
//     id String @id @default(cuid())
//     title String
//     description String?
//     packType PackType
//     discountPercentage Float?
//     fixedPrice Float?
//     bundleQuantity Int
    
//     validFrom DateTime
//     validTo DateTime
//     chef Chef @relation(fields: [chefId], references: [id])
//     chefId String

//     PackListings PackListing[]
//     createdAt DateTime @default(now())
// }

// model PackListing {
//     id String @id @default(cuid())
//     pack Pack @relation(fields: [packId], references: [id])
//     packId String
//     listing Listing @relation(fields: [listingId], references: [id])
//     listingId String

//     @@unique([packId, listingId])
// }

// model Transaction {
//     id String @id @default(cuid())
//     amount Float
//     status TransactionStatus
//     createdAt DateTime @default(now())
//     releasedAt DateTime?
//     paymentMethod String?
//     paymentIntentId String?

//     order Order @relation(fields: [orderId], references: [id])
//     orderId String @unique
// }

// enum TransactionStatus {
//     HELD
//     RELEASED
//     REFUNDED
//     FAILED
// }

// model RecurringOrder {
//     id String @id @default(cuid())
//     quantity Int
//     nextOrder DateTime
//     frequency Frequency
//     active Boolean @default(true)

//     eater Eater @relation(fields: [eaterId], references: [id])
//     eaterId String

//     chef Chef @relation(fields: [chefId], references: [id])
//     chefId String

//     listing Listing @relation(fields: [listingId], references: [id])
//     listingId String

//     orders Order[]
// }

// enum Frequency {
//     DAILY
//     WEEKLY
//     BIWEEKLY
//     MONTHLY
// }

// model ChefReview {
//     id String @id @default(cuid())
//     rating Int
//     comment String?
//     createdAt DateTime @default(now())

//     chef Chef @relation("ChefReviews", fields: [chefId], references: [id])
//     chefId String

//     eater Eater @relation("EaterChefReviews", fields: [eaterId], references: [id])
//     eaterId String
// }

// model ItemReview {
//     id String @id @default(cuid())
//     rating Int
//     comment String?
//     createdAt DateTime @default(now())

//     chef Chef @relation("ChefItemReviews", fields: [chefId], references: [id])
//     chefId String

//     eater Eater @relation("EaterItemReviews", fields: [eaterId], references: [id])
//     eaterId String

//     listing Listing @relation(fields: [listingId], references: [id])
//     listingId String
// }

// model Plan {
//     id String @id @default(cuid())
//     dayOfWeek Int
//     startTime String
//     endTime String
//     pickup Boolean
//     dropoff Boolean
//     dropoffFee Float?

//     chef Chef @relation(fields: [chefId], references: [id])
//     chefId String
// }

// model Admin {
//     id String @id @default(cuid())
//     email String @unique
//     firebaseUid String  @unique
//     createdAt DateTime @default(now())
// }