// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model User {
    id  String  @id @default(cuid())
    firebaseUid String  @unique
    email   String  @unique
    firstName String
    lastName String
    profileImage String?
    createdAt DateTime @default(now())

    chef Chef?
    eater Eater?
}

model Eater {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String @unique
    isActive Boolean @default(true)
    
    orders Order[] @relation('EaterOrders')
    itemReviews ItemReview[] @relation('EaterItemReviews')
    reviews ChefReview[] @relation('EaterChefReviews')
    recurringOrders RecurringOrder[]
}

model Chef {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String @unique

    bio String?
    postcode String
    suburb String
    state String
    latitude Float?
    longitude Float?

    Cuisines UserCuisine[]
    listings Listing[]

    chefReviews ChefReview[] @relation('ChefReviews')
    itemReviews ItemReview[] @relation('ChefItemReviews')
    orders Order[] @relation('ChefOrders')
    schedules Schedule[]
}

model Cuisine {
    id String @id @default(cuid())
    name String @unique
    chefs UserCuisine[]
}

model Listing {
    id String @id @default(cuid())
    title String
    description String
    price Float
    image String?
    available Boolean @default(true)
    dietryTags String[]
    createdAt DateTime @default(now())

    chef Chef @relation(fields: [chefId], references: [id])
    chefId String

    orderItems OrderItem[]
    reviews ItemReview[]
}

model Order {
    id String @id @default(cuid())
    status OrderStatus
    totalPrice Float
    pickupTime DateTime?
    createdAt DateTime @default(now())

    chef Chef @relation('ChefOrders', fields: [chefId], references: [id])
    chefId String

    eater Eater @relation('EaterOrders', fields: [eaterId], references: [id])
    eaterId String

    orderItems OrderItem[]
    transaction Transaction?
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PREPARING
    READY
    COMPLETED
    CANCELLED
}